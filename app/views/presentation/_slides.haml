.slide
  %h1 Rack::Cache
  %h2 One gotcha... two gotcha...


.slide
  %h1 Зачем?

  %ul
    %li slashdot
    %li load times
    %li счет за трафик и ресурсы
    %li счастливые пользователи


.slide
  :markdown
    # HTTP кэширование

    * выгода: значительна
    * сложность: минимальна

    _отношение выгода / сложность для HTTP кэша весьма велико_

    * больше 20 лет



.slide
  %h1 Короче, Склифосовский

  :markdown
        class TestController < ApplicationController
          def show
            seed = Time.now.to_i / 10
            srand(seed)

            if stale? :etag => seed
              expires_in 10.seconds, :public => true
              render :text => Faker::Lorem.paragraphs(500)
            end
          end
        end

  :markdown
        # Gemfile
        gem 'rack-cache'


.slide
  %h1 Работает!
  :markdown
        > find tmp/cache -type f

        tmp/cache/BB4/EF0/http%3A%2F%2Flocalhost%3A3000%2Ftest%3F
        tmp/cache/ABE/580/43374e3d3365b9c26451d581ce220da9cdd0eb67

  %p= image_tag "itworks.jpg"



.slide
  %h1 Работает! Но...

  :markdown
        > rake middleware RAILS_ENV=production

        use Rack::Cache
        use Rack::Lock
        use #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0xb6ad4970>
        use Rack::Runtime
        use Rack::MethodOverride
        use Rails::Rack::Logger
        use ActionDispatch::ShowExceptions
        use ActionDispatch::RemoteIp
        use Rack::Sendfile
        use ActionDispatch::Callbacks
        use ActiveRecord::ConnectionAdapters::ConnectionManagement
        use ActiveRecord::QueryCache
        use ActionDispatch::Cookies
        use ActionDispatch::Session::CookieStore
        use ActionDispatch::Flash
        use ActionDispatch::ParamsParser
        use ActionDispatch::Head
        use Rack::ConditionalGet
        use Rack::ETag
        use ActionDispatch::BestStandardsSupport
        run RackCacheTest::Application.routes


.slide
  :markdown
    # Забудем про Rack::Cache

        class AssetsController < ApplicationController
          def serve
            path = ... # хитрый код

            if stale? :last_modified => File.mtime(path), :public => true
              expires_in 1.year
              send_file path, :type => File.mime_type(path),
                              :disposition => 'inline'
            end
          end
        end

    * без rack-cache файл отдается nginx'ом (X-Accel-Redirect)


.slide
  :markdown
    # Rack::Cache начинает нам мешать

    * используется в 2 раза больше места на диске
    * файл отдается рельсами

          # lib/rack/cache/metastore.rb
          File.open(path, 'rb') { |io| Marshal.load(io) }

    * а нам это категорически не нравится


.slide
  :markdown
    # Поддержка Rack::Sendfile

    * `#to_path` - алиас для `File#path`
    * Rack::Cache должен подключаться после Rack::Sendfile

          # config/enviroments/production.rb
          config.middleware.delete(Rack::Cache)
          config.middleware.insert_after Rack::Sendfile, Rack::Cache


.slide
  :markdown
    # Поддержка Rack::Sendfile

        > rake middleware RAILS_ENV=production

        use ActionDispatch::Static
        use Rack::Lock
        use #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0xb6d618b4>
        use Rack::Runtime
        use Rack::MethodOverride
        use Rails::Rack::Logger
        use ActionDispatch::ShowExceptions
        use ActionDispatch::RemoteIp
        use Rack::Sendfile
        use Rack::Cache
        use ActionDispatch::Reloader
        use ActionDispatch::Callbacks
        use ActiveRecord::ConnectionAdapters::ConnectionManagement
        use ActiveRecord::QueryCache
        use ActionDispatch::Cookies
        use ActionDispatch::Session::CookieStore
        use ActionDispatch::Flash
        use ActionDispatch::ParamsParser
        use ActionDispatch::Head
        use Rack::ConditionalGet
        use Rack::ETag
        use ActionDispatch::BestStandardsSupport
        run RackCacheTest::Application.routes


.slide
  :markdown
    # Тесты

    * фокус не удался :)
    * при `ab -с 1000 -n 5000` не падает
    * все упирается в ширину канала тестирующей машины


.slide
  :markdown
    # Slashdot-эффект

    ## Признаки

    * куча хитов по очень малому числу урлов
    * небольшая длина сессии
    * критично всех обслужить и не упасть


.slide
  :markdown
    # Slashdot-эффект

    ## Спасаться будем так

        expires_in 10.seconds, :public => true

    * предсказуемая нагрузка на рельсы и базу
    * практически незаметно для пользователя


.slide
  :markdown
    # Не все так замечательно (опять!)

    * злые браузеры не хотят хранить устаревший контент
    * счет за трафик увеличивается
    * время отклика растёт


.slide
  :markdown
    # Чего мы вообще хотим

    * разрешить браузеру решать, сколько хранить страницу
    * заставить прокси валидировать контент


.slide
  :markdown
    # Как бы это сделать

    Упс... HTTP об этом уже позаботился

        Cache-Control: s-maxage=10, public

    В терминах рельсов:

        expires_in nil, 's-maxage' => 10.seconds,  :public => true


.slide
  :markdown
    # Кстати

    Если вспомнить проблему с файлами, отдаваемыми через рельсы

        expires_in 1.year, 's-maxage' => 0,  :public => true

    Решает почти все наши проблемы (пока нет дополнительных прокси)


.slide
  :markdown
    # А насколько вообще нужен этот кэш?

        > ab -c100 -n500 -i http://rack-cache-test.heroku.com/test

        Requests per second:    7.62 [#/sec] (mean)
        Time per request:       13119.061 [ms] (mean)
        Time per request:       131.191 [ms] (mean, across all concurrent requests)

    vs


        > ab -c100 -n500 -i http://rack-cache-test.heroku.com/test

        Requests per second:    81.44 [#/sec] (mean)
        Time per request:       1227.823 [ms] (mean)
        Time per request:       12.278 [ms] (mean, across all concurrent requests)


.slide
  :markdown
    # Итого

    * Rack::Cache - это очень просто, но думать все же надо
    * в связке с Rack::Sendfile разгружает рельсы, в т.ч. на больших динамических страницах
    * для entitystore лучше использовать Filestore, для metastore - Memory или memcache
    * имеет смысл начинать именно с http-кэша


.slide

  %p{:style => "margin: 24% 0; text-align: center"} Спасибо
